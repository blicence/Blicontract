/* // SPDX-License-Identifier: MIT

pragma solidity ^0.8.9;

import {console} from "forge-std/console.sol";
import {Script} from "forge-std/Script.sol";
import {Test} from "forge-std/Test.sol";
import {BcontractFactory} from "../../contracts/v2/BcontractFactory.sol";
import {Bcontractv2} from "../../contracts/v2/Bcontractv2.sol";
import {CustomerNftUpgradeable} from "../../contracts/v2/CustomerNftUpgradeable.sol";
import {ProducerLogicUpgradeable} from "../../contracts/v2/ProducerLogic.sol";

// Declare a global instance of Vm so we can use it's functions outside of Test contracts
//Vm constant VM = Vm(address(uint160(uint256(keccak256('hevm cheat code')))));
 
contract DeployUUPS is Script {
 
    BcontractFactory bcontractFactory;
    Bcontractv2 bcontractv2;
    CustomerNftUpgradeable customerNftUpgradeable;
    ProducerLogicUpgradeable producerLogic;

    function test() public {
        customerNftUpgradeable = new CustomerNftUpgradeable();

        // console.log("The faucet balance should be reduced");

        producerLogic = new ProducerLogicUpgradeable();

        bcontractv2 = new Bcontractv2();

        bcontractFactory = new BcontractFactory();
        bytes memory callData = abi.encodeWithSignature(
            "initialize(address,address)",
            customerNftUpgradeable,
            producerLogic
        );
        // bcontractFactory.initialize(address(customerNftUpgradeable),address(producerLogic));
        // Run test with `forge test -vvv` to see the output of this log messages
        console.log("Call data: ", vm.toString(callData));
        (bool ok, ) = address(bcontractFactory).delegatecall(callData);
        if (!ok) revert("Delegate call failed");
        console.log("bcontractFactory");


        //setBcontractImplementation(address _BcontractImplementationAddress)
        bytes memory callData2 = abi.encodeWithSignature(
            "setBcontractImplementation(address)",
            bcontractv2
        );

        console.log("Call data: ", vm.toString(callData2));
        (bool ok1, ) = address(bcontractFactory).delegatecall(callData2);
        if (!ok1) revert("Delegate call2 failed");
        //  console.log("bcontractFactory");
    }
}
 */