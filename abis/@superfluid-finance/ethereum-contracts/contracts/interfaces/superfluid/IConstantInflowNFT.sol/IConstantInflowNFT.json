[
  "error CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL()",
  "error CFA_NFT_APPROVE_TO_CALLER()",
  "error CFA_NFT_APPROVE_TO_CURRENT_OWNER()",
  "error CFA_NFT_INVALID_TOKEN_ID()",
  "error CFA_NFT_ONLY_SUPER_TOKEN_FACTORY()",
  "error CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL()",
  "error CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER()",
  "error CFA_NFT_TRANSFER_IS_NOT_ALLOWED()",
  "error CFA_NFT_TRANSFER_TO_ZERO_ADDRESS()",
  "error CIF_NFT_ONLY_CONSTANT_OUTFLOW()",
  "event Approval(address indexed,address indexed,uint256 indexed)",
  "event ApprovalForAll(address indexed,address indexed,bool)",
  "event MetadataUpdate(uint256)",
  "event Transfer(address indexed,address indexed,uint256 indexed)",
  "function approve(address,uint256)",
  "function balanceOf(address) view returns (uint256)",
  "function burn(uint256)",
  "function flowDataByTokenId(uint256) view returns (tuple(address,address,address,uint32))",
  "function getApproved(uint256) view returns (address)",
  "function getTokenId(address,address,address) view returns (uint256)",
  "function initialize(string,string)",
  "function isApprovedForAll(address,address) view returns (bool)",
  "function mint(address,uint256)",
  "function name() view returns (string)",
  "function ownerOf(uint256) view returns (address)",
  "function safeTransferFrom(address,address,uint256)",
  "function safeTransferFrom(address,address,uint256,bytes)",
  "function setApprovalForAll(address,bool)",
  "function supportsInterface(bytes4) view returns (bool)",
  "function symbol() view returns (string)",
  "function tokenURI(uint256) view returns (string)",
  "function transferFrom(address,address,uint256)",
  "function triggerMetadataUpdate(uint256)"
]
